# -*- coding: utf-8 -*-
"""Melanoma Tumor Size Prediction Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12jaEtTDH6Rh6Q0F9Bp7Sa4jkJGmCsEh-

# **Melanoma Tumor Size Prediction Model**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import cross_val_score

train=pd.read_csv("train.csv.xls")
test=pd.read_csv("test.csv.xls")
target=train.pop("tumor_size")
sub=pd.read_csv("sample_submission.csv.xls")
data=pd.concat([train,test],ignore_index=True)

data.isnull().sum() , data.shape

data.head(5)

data.dtypes

data.describe()

data.corr()

"""## Exploratory Data Analysis"""

def nor(x):
  sk=x.skew()
  sq=(np.sqrt(x)).skew()
  lg=(np.log1p(x)).skew()
  return {"skew":sk,"sqrt":sq,"log":lg}

plt.figure(figsize=(17,14))
plt.subplot(3,3,1)
sns.distplot(data.mass_npea)
plt.subplot(3,3,2)
sns.distplot(data.size_npear)
plt.subplot(3,3,3)
sns.distplot(data.malign_ratio)
plt.subplot(3,3,4)
sns.distplot(data.damage_size)
plt.subplot(3,3,5)
sns.distplot(data.exposed_area)
plt.subplot(3,3,6)
sns.distplot(data.std_dev_malign)
plt.subplot(3,3,7)
sns.distplot(data.err_malign)
plt.subplot(3,3,8)
sns.distplot(data.malign_penalty)
plt.subplot(3,3,9)
sns.distplot(data.damage_ratio)

data.columns

from IPython.display import display
display(print("1. mass_npea"))
display(nor(data.mass_npea))
display(print("2. size_npear"))
display(nor(data.size_npear))
display(print("3. malign_ratio"))
nor(data.malign_ratio)
display(print("4. damage_size"))
display(nor(data.damage_size))
display(print("5. exposed_area"))
display(nor(data.exposed_area))
display(print("6. std_dev_malign"))
display(nor(data.std_dev_malign))
display(print("7. err_malign"))
display(nor(data.err_malign))
display(print("8. malign_penalty"))
display(nor(data.malign_penalty))
display(print("9. damage_ratio"))
display(nor(data.damage_ratio))

t=pd.concat([train,test],ignore_index=True)

t.head(1)

"""### TRANSFORMATION"""

t.mass_npea=np.sqrt(t.mass_npea)

t.size_npear=np.log1p(t.size_npear)
size=np.log1p(t.size_npear)

t.malign_ratio=np.log1p(t.malign_ratio)

t.damage_size=np.sqrt(t.damage_size)

t.exposed_area=np.sqrt(t.exposed_area)

t.std_dev_malign=np.log1p(t.std_dev_malign)

t.malign_penalty=np.sqrt(t.malign_penalty)

"""## Dropping features with high correlation"""

t.drop("size_npear",axis=1,inplace=True)

"""## FEATURE ENGINEERING"""

t["p/e"]=t.malign_penalty/t.err_malign

t["mass/exposed_area"]=(t.mass_npea/t.exposed_area)

t["mass/std"]=t.mass_npea/t.std_dev_malign

t["error/std"]=t.err_malign/t.std_dev_malign

t["m/a*s"]=t["mass/exposed_area"]*t.damage_size

t["m/a_sqrt"]=np.sqrt(t["mass/exposed_area"])

t["error-penalty"]=t.damage_ratio-t.malign_ratio

t["FE1"]=t["mass/exposed_area"]*t["p/e"]

t["FE2"]=t["mass/exposed_area"]*t["mass/std"]

t["FE3"]=t.malign_ratio+t.std_dev_malign

t["FE4"]=t.damage_ratio-t.std_dev_malign

t["FE5"]=t["m/a*s"]-t.malign_ratio

t.head(3)

t.shape, train.shape , test.shape , target.shape

#data splitting
trn=t[0:9146]
tst=t[9146:]

"""### ENSEMBLING"""

from sklearn.ensemble import StackingRegressor
from sklearn.ensemble import ExtraTreesRegressor
from sklearn.ensemble import BaggingRegressor
from lightgbm import LGBMRegressor

bag=BaggingRegressor(n_estimators=150,max_features=13)
lgb=LGBMRegressor(n_estimators=900,num_leaves=48,reg_lambda=50,reg_alpha=20)
etc=ExtraTreesRegressor(n_estimators=400,max_depth=26,min_samples_split=2,max_features=10)

tst.loc[tst["err_malign"] == 0.0]

tst["p/e"][9526]=-1
tst["FE1"][9526]=-1

estimators=[("bag",bag),("lgb",lgb),("etc",etc)]

reg = StackingRegressor(estimators=estimators)

scores=cross_val_score(reg, trn,target, cv = 5, scoring = "neg_root_mean_squared_error")
scores.mean()

reg.fit(trn,target)
pre=reg.predict(tst)
sub["tumor_size"]=pre
sub.to_csv("sub_02.csv",index=False)